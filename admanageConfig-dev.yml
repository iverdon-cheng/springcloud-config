
spring:
    ## redis相关配置
  redis:
    host: 127.0.0.1
    port: 6379
    database: 0
    password:
    timeout: 5000
    jedis:
      pool:
        maxTotal: 200
        maxIdle: 8
        maxWaitMillis: -1
        minIdle: 0
#        #最大连接数
#        maxTotal: 1000
#        #实际上才是业务需要的最大连接数
#        maxIdle: 1000
#        maxWaitMillis: 100000
#        minIdle: 500
#        #开启jmx监控，可用于监控
#        jmxEnabled: true


  #数据库信息配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型
    url: jdbc:mysql://192.168.0.76:3306/loongcheer?useUnicode=true&characterEncoding=utf-8&useSSL=false
    driverClassName: com.mysql.cj.jdbc.Driver
    username: root
    password: root

    #druid连接池配置
    #初始化时建立物理连接的个数
    initialSize: 5
    #最小连接池数量
    minIdle: 5
    #最大连接池数量
    maxActive: 20
    #获取连接时最大等待时间，单位毫秒
    maxWait: 60000
    #有两个含义：
    #1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    # 配置监控统计拦截的filters,去掉监控界面sql无法统计，‘wall’用于防火墙
    filters: stat,wall,log4j
    maxPoolPreparedStatementPerConnectionSize: 20
    userGlobalDataSourceStat: true
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
  #发送数据到kafka
  cloud:
    stream:
      kafka:
        binder:
          #Kafka的消息中间件服务器
          brokers: localhost:9092
          #Zookeeper的节点，如果集群，后面加,号分隔
          zk-nodes: localhost:2181
          #如果设置为false,就不会自动创建Topic 有可能你Topic还没创建就直接调用了。
          auto-create-topics: true
          autoAddPartitions: true
      bindings:
        #初始化记录用户信息
        initoutput:
          #消息发往的目的地
          destination: stream-init
          #消息发送的格式，接收端不用指定格式，但是发送端要
          content-type: application/json
#          producer:
#            #分区的主键，根据什么来分区，下面的payload.id只是一个对象的id用于做为Key，用来说明的。希望不要误解
#            partitionKeyExpression: payload.sign
#            #Key和分区数量进行取模去分配消息，这里分区数量配置为2
#            partitionCount: 2

mybatis-plus:
  # 在classpath前添加星号可以使项目热加载成功
  mapper-locations: classpath*:mapper/*.xml
  #mapper-locations: classpath:/**.xml
  #实体扫描，多个package用逗号或者分号分隔
  type-aliases-package: com.loongcheer.advertisement.api.entity;com.loongcheer.advertisement.api.query;com.loongcheer.advertisement.api.vo
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 5
    #机器 ID 部分(影响雪花ID)
    workerId: 1
    #数据标识 ID 部分(影响雪花ID)(workerId 和 datacenterId 一起配置才能重新初始化 Sequence)
    datacenterId: 18
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 2
    #驼峰下划线转换
    db-column-underline: true
    #刷新mapper 调试神器
    refresh-mapper: true
    #数据库大写下划线转换
    #capital-mode: true
    #序列接口实现类配置
    #key-generator: com.baomidou.springboot.xxx
    #逻辑删除配置（下面3个配置）
    logic-delete-value: 0
    logic-not-delete-value: 1
    #自定义SQL注入器
    #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
    #自定义填充策略接口实现
    #meta-object-handler: com.baomidou.springboot.xxx
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
